const mongoose = require('mongoose');

// Generated by Copilot
const notificationSchema = new mongoose.Schema({
  recipient: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    required: true
  },
  sender: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    default: null
  },
  type: {
    type: String,
    enum: [
      'task_assigned',
      'task_completed',
      'task_updated',
      'task_commented',
      'task_mentioned',
      'task_due_reminder',
      'task_overdue',
      'project_assigned',
      'project_updated',
      'project_completed',
      'workspace_invited',
      'workspace_removed',
      'time_entry_approved',
      'time_entry_rejected',
      'deadline_approaching',
      'system_announcement'
    ],
    required: true
  },
  title: {
    type: String,
    required: true,
    trim: true,
    maxlength: [200, 'Title cannot be more than 200 characters']
  },
  message: {
    type: String,
    required: true,
    trim: true,
    maxlength: [1000, 'Message cannot be more than 1000 characters']
  },
  isRead: {
    type: Boolean,
    default: false
  },
  readAt: {
    type: Date,
    default: null
  },
  priority: {
    type: String,
    enum: ['low', 'medium', 'high', 'urgent'],
    default: 'medium'
  },
  channels: {
    inApp: {
      type: Boolean,
      default: true
    },
    email: {
      type: Boolean,
      default: false
    },
    push: {
      type: Boolean,
      default: false
    },
    sms: {
      type: Boolean,
      default: false
    }
  },
  delivery: {
    email: {
      sent: {
        type: Boolean,
        default: false
      },
      sentAt: {
        type: Date,
        default: null
      },
      error: {
        type: String,
        default: null
      }
    },
    push: {
      sent: {
        type: Boolean,
        default: false
      },
      sentAt: {
        type: Date,
        default: null
      },
      error: {
        type: String,
        default: null
      }
    }
  },
  relatedTask: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Task',
    default: null
  },
  relatedProject: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Project',
    default: null
  },
  relatedWorkspace: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Workspace',
    default: null
  },
  relatedComment: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Comment',
    default: null
  },
  relatedTimeEntry: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'TimeEntry',
    default: null
  },
  actionUrl: {
    type: String,
    default: null
  },
  actionText: {
    type: String,
    default: null
  },
  metadata: {
    type: mongoose.Schema.Types.Mixed,
    default: {}
  },
  expiresAt: {
    type: Date,
    default: null
  },
  isArchived: {
    type: Boolean,
    default: false
  },
  archivedAt: {
    type: Date,
    default: null
  }
}, {
  timestamps: true,
  toJSON: { virtuals: true },
  toObject: { virtuals: true }
});

// Indexes
notificationSchema.index({ recipient: 1, createdAt: -1 });
notificationSchema.index({ recipient: 1, isRead: 1 });
notificationSchema.index({ recipient: 1, type: 1 });
notificationSchema.index({ sender: 1 });
notificationSchema.index({ relatedTask: 1 });
notificationSchema.index({ relatedProject: 1 });
notificationSchema.index({ relatedWorkspace: 1 });
// notificationSchema.index({ expiresAt: 1 }); // Removed duplicate - TTL index below is sufficient
notificationSchema.index({ isArchived: 1 });

// TTL index for automatic cleanup of expired notifications
notificationSchema.index({ expiresAt: 1 }, { expireAfterSeconds: 0 });

// Virtual for checking if notification is urgent
notificationSchema.virtual('isUrgent').get(function() {
  return this.priority === 'urgent' || this.priority === 'high';
});

// Virtual for checking if notification is expired
notificationSchema.virtual('isExpired').get(function() {
  return this.expiresAt && new Date() > this.expiresAt;
});

// Mark notification as read
notificationSchema.methods.markAsRead = function() {
  if (!this.isRead) {
    this.isRead = true;
    this.readAt = new Date();
  }
};

// Mark notification as unread
notificationSchema.methods.markAsUnread = function() {
  this.isRead = false;
  this.readAt = null;
};

// Archive notification
notificationSchema.methods.archive = function() {
  this.isArchived = true;
  this.archivedAt = new Date();
};

// Set expiration date
notificationSchema.methods.setExpiration = function(days = 30) {
  const expirationDate = new Date();
  expirationDate.setDate(expirationDate.getDate() + days);
  this.expiresAt = expirationDate;
};

// Mark email as sent
notificationSchema.methods.markEmailSent = function() {
  this.delivery.email.sent = true;
  this.delivery.email.sentAt = new Date();
  this.delivery.email.error = null;
};

// Mark email as failed
notificationSchema.methods.markEmailFailed = function(error) {
  this.delivery.email.sent = false;
  this.delivery.email.error = error;
};

// Mark push notification as sent
notificationSchema.methods.markPushSent = function() {
  this.delivery.push.sent = true;
  this.delivery.push.sentAt = new Date();
  this.delivery.push.error = null;
};

// Mark push notification as failed
notificationSchema.methods.markPushFailed = function(error) {
  this.delivery.push.sent = false;
  this.delivery.push.error = error;
};

// Static method to create task notification
notificationSchema.statics.createTaskNotification = async function(type, task, recipient, sender, additionalData = {}) {
  const titles = {
    task_assigned: `Task "${task.title}" assigned to you`,
    task_completed: `Task "${task.title}" has been completed`,
    task_updated: `Task "${task.title}" has been updated`,
    task_commented: `New comment on task "${task.title}"`,
    task_mentioned: `You were mentioned in task "${task.title}"`,
    task_due_reminder: `Task "${task.title}" is due soon`,
    task_overdue: `Task "${task.title}" is overdue`
  };
  
  const messages = {
    task_assigned: `You have been assigned to task "${task.title}" in project "${task.project.name}"`,
    task_completed: `Task "${task.title}" has been marked as completed`,
    task_updated: `Task "${task.title}" has been updated by ${sender?.name || 'System'}`,
    task_commented: `${sender?.name || 'Someone'} commented on task "${task.title}"`,
    task_mentioned: `${sender?.name || 'Someone'} mentioned you in task "${task.title}"`,
    task_due_reminder: `Task "${task.title}" is due on ${task.dueDate?.toLocaleDateString()}`,
    task_overdue: `Task "${task.title}" was due on ${task.dueDate?.toLocaleDateString()}`
  };
  
  const notification = new this({
    recipient,
    sender,
    type,
    title: titles[type],
    message: messages[type],
    relatedTask: task._id,
    relatedProject: task.project._id,
    relatedWorkspace: task.workspace,
    actionUrl: `/projects/${task.project._id}/tasks/${task._id}`,
    actionText: 'View Task',
    ...additionalData
  });
  
  notification.setExpiration(30); // Expire in 30 days
  return await notification.save();
};

// Static method to create project notification
notificationSchema.statics.createProjectNotification = async function(type, project, recipient, sender, additionalData = {}) {
  const titles = {
    project_assigned: `Added to project "${project.name}"`,
    project_updated: `Project "${project.name}" has been updated`,
    project_completed: `Project "${project.name}" has been completed`
  };
  
  const messages = {
    project_assigned: `You have been added to project "${project.name}"`,
    project_updated: `Project "${project.name}" has been updated by ${sender?.name || 'System'}`,
    project_completed: `Project "${project.name}" has been marked as completed`
  };
  
  const notification = new this({
    recipient,
    sender,
    type,
    title: titles[type],
    message: messages[type],
    relatedProject: project._id,
    relatedWorkspace: project.workspace,
    actionUrl: `/projects/${project._id}`,
    actionText: 'View Project',
    ...additionalData
  });
  
  notification.setExpiration(30);
  return await notification.save();
};

// Static method to get unread count for user
notificationSchema.statics.getUnreadCount = async function(userId) {
  return await this.countDocuments({
    recipient: userId,
    isRead: false,
    isArchived: false
  });
};

// Static method to mark all as read for user
notificationSchema.statics.markAllAsRead = async function(userId) {
  return await this.updateMany(
    { recipient: userId, isRead: false },
    { isRead: true, readAt: new Date() }
  );
};

// Static method to cleanup old notifications
notificationSchema.statics.cleanupOldNotifications = async function(daysOld = 90) {
  const cutoffDate = new Date();
  cutoffDate.setDate(cutoffDate.getDate() - daysOld);
  
  return await this.deleteMany({
    createdAt: { $lt: cutoffDate },
    isRead: true
  });
};

module.exports = mongoose.model('Notification', notificationSchema);
