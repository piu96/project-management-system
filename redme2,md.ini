# Project Management System

## 🚀 Overview
A comprehensive enterprise-grade project management application built with Node.js, Express.js, and MongoDB. This system provides teams and organizations with powerful tools to manage workspaces, projects, tasks, and collaborate effectively while tracking progress in real-time.

## ✨ Key Features

### 🏢 **Workspace Management**
- **Multi-tenant Architecture**: Create and manage multiple workspaces (organizations)
- **Role-based Access Control**: Workspace admin, project manager, team member roles
- **Member Management**: Invite users, manage permissions, role assignments
- **Workspace Settings**: Customizable workspace configurations
- **Billing Integration Ready**: Foundation for subscription management

### 🔐 **Authentication & Security**
- **JWT-based Authentication**: Secure token-based user sessions
- **Role-based Authorization**: Granular permission system
- **Multi-workspace Support**: Users can belong to multiple workspaces
- **Session Management**: Auth token validation and refresh
- **Password Security**: Bcrypt hashing with salt

### 📋 **Project Management**
- **Full CRUD Operations**: Create, read, update, delete projects
- **Project Organization**: Workspace-based project grouping
- **Status Tracking**: Planning, Active, On Hold, Completed, Cancelled
- **Priority Management**: Low, Medium, High, Critical priorities
- **Member Assignment**: Add/remove project members with roles
- **Budget Tracking**: Allocated vs spent budget monitoring
- **Client Management**: Client information and contact details
- **Archive System**: Archive/restore projects with audit trail

### ✅ **Task Management**
- **Advanced Task System**: Comprehensive task CRUD operations
- **Smart Assignment**: Assign tasks to project members
- **Status Workflow**: Todo → In Progress → Review → Done → Cancelled
- **Priority System**: Low, Medium, High, Urgent priority levels
- **Task Types**: Task, Bug, Feature, Story, Epic categorization
- **Time Tracking**: Estimated vs actual hours tracking
- **Watcher System**: Subscribe to task updates
- **Advanced Filtering**: Filter by status, priority, assignee, dates, tags
- **Search Functionality**: Full-text search in titles and descriptions
- **Progress Tracking**: Automatic progress calculation

### 👥 **Team Collaboration**
- **Project Teams**: Role-based project membership
- **Permission System**: Granular access control
- **User Dashboard**: Personal task views and assignments
- **Activity Tracking**: Comprehensive audit logs

### 📊 **Reporting & Analytics**
- **Task Analytics**: Progress tracking and completion rates
- **Time Reports**: Time logging and productivity metrics
- **Project Insights**: Budget, timeline, and resource utilization
- **Custom Dashboards**: Personalized views and metrics

## 🏗️ System Architecture

### **Backend Architecture**
```
├── 🌐 API Layer (Express.js)
│   ├── Authentication Middleware
│   ├── Validation Layer
│   ├── Route Handlers
│   └── Error Handling
│
├── 🔧 Business Logic Layer
│   ├── Service Classes
│   ├── Permission Checks
│   ├── Data Validation
│   └── Business Rules
│
├── 📊 Data Access Layer
│   ├── Mongoose Models
│   ├── Database Schemas
│   ├── Relationships
│   └── Indexing
│
└── 🗄️ Database Layer (MongoDB)
    ├── Collections
    ├── Indexes
    ├── Aggregations
    └── Transactions
```

### **Module Structure**
```
src/
├── models/              # Database schemas
│   ├── User.js          # User model with auth
│   ├── Workspace.js     # Multi-tenant workspaces
│   ├── WorkspaceMember.js # Workspace membership
│   ├── Project.js       # Project management
│   └── Task.js          # Task system
│
├── modules/             # Feature modules
│   ├── auth/            # Authentication system
│   ├── workspaces/      # Workspace management
│   ├── projects/        # Project management
│   └── tasks/           # Task management
│
├── middleware/          # Custom middleware
├── routes/              # API route definitions
├── utils/               # Utility functions
└── config/              # Configuration files
```

## 📚 API Documentation

### **Base URL**: `http://localhost:3000/api/app`

### **Authentication**
All API endpoints require authentication except registration and login:
```
Authorization: Bearer <jwt_token>
```

### **Core Endpoints**

#### **Authentication APIs**
```http
POST /auth/register          # User registration
POST /auth/login             # User login
POST /auth/logout            # User logout
POST /auth/refresh-token     # Refresh JWT token
POST /auth/forgot-password   # Password reset request
POST /auth/reset-password    # Password reset confirmation
```

#### **Workspace APIs**
```http
GET    /workspaces                    # List user workspaces
POST   /workspaces                    # Create workspace
GET    /workspaces/:id                # Get workspace details
PUT    /workspaces/:id                # Update workspace
DELETE /workspaces/:id                # Delete workspace
GET    /workspaces/:id/members        # List workspace members
POST   /workspaces/:id/invite         # Invite user to workspace
PUT    /workspaces/:id/members/:userId # Update member role
DELETE /workspaces/:id/members/:userId # Remove member
```

#### **Project APIs**
```http
GET    /projects/workspace/:workspaceId  # List workspace projects
POST   /projects                         # Create project
GET    /projects/:id                     # Get project details
PUT    /projects/:id                     # Update project
DELETE /projects/:id                     # Delete project
POST   /projects/:id/members             # Add project member
DELETE /projects/:id/members/:userId     # Remove project member
```

#### **Task APIs**
```http
GET    /tasks/project/:projectId         # List project tasks
GET    /tasks/user/my-tasks              # Get user's tasks
POST   /tasks                            # Create task
GET    /tasks/:id                        # Get task details
PUT    /tasks/:id                        # Update task
DELETE /tasks/:id                        # Delete task
PATCH  /tasks/:id/status                 # Update task status
PATCH  /tasks/:id/assign                 # Assign task
POST   /tasks/:id/time                   # Log time entry
POST   /tasks/:id/comments               # Add comment
POST   /tasks/:id/watchers               # Add watcher
DELETE /tasks/:id/watchers/:userId       # Remove watcher
GET    /tasks/project/:projectId/stats   # Get task statistics
```

### **Query Parameters**

#### **Task Filtering**
```http
GET /tasks/project/:projectId?
  page=1&
  limit=20&
  status=todo,in_progress&
  priority=high,critical&
  assignee=userId&
  search=keyword&
  sortBy=dueDate&
  sortOrder=asc
```

## 🛠️ Tech Stack

### **Backend**
- **Runtime**: Node.js 18+
- **Framework**: Express.js 4.x
- **Database**: MongoDB 6.x
- **ODM**: Mongoose 7.x
- **Authentication**: JWT (jsonwebtoken)
- **Validation**: express-validator
- **Security**: bcryptjs, helmet, cors
- **Logging**: Morgan, custom loggers
- **Environment**: dotenv

### **Development Tools**
- **Process Manager**: Nodemon
- **Code Quality**: ESLint, Prettier
- **Testing**: Jest, Supertest
- **Documentation**: Swagger/OpenAPI

## 📁 Project Structure

```
project-management/
├── 📁 src/
│   ├── 📁 models/                    # Database models
│   │   ├── User.js                   # User authentication model
│   │   ├── Workspace.js              # Workspace model
│   │   ├── WorkspaceMember.js        # Workspace membership
│   │   ├── Project.js                # Project management model
│   │   └── Task.js                   # Task management model
│   │
│   ├── 📁 modules/                   # Feature modules
│   │   ├── 📁 auth/                  # Authentication module
│   │   │   ├── auth.controller.js    # Auth request handlers
│   │   │   ├── auth.service.js       # Auth business logic
│   │   │   ├── auth.validator.js     # Auth input validation
│   │   │   ├── auth.middleware.js    # Auth middleware
│   │   │   └── auth.route.js         # Auth routes
│   │   │
│   │   ├── 📁 workspaces/            # Workspace module
│   │   │   ├── workspace.controller.js
│   │   │   ├── workspace.service.js
│   │   │   ├── workspace.validator.js
│   │   │   └── workspace.route.js
│   │   │
│   │   ├── 📁 projects/              # Project module
│   │   │   ├── project.controller.js
│   │   │   ├── project.service.js
│   │   │   ├── project.validator.js
│   │   │   └── project.route.js
│   │   │
│   │   └── 📁 tasks/                 # Task module
│   │       ├── task.controller.js
│   │       ├── task.service.js
│   │       ├── task.validator.js
│   │       └── task.route.js
│   │
│   ├── 📁 routes/                    # Route definitions
│   │   └── app.js                    # Main route registry
│   │
│   ├── 📁 middleware/                # Custom middleware
│   ├── 📁 utils/                     # Utility functions
│   └── 📁 config/                    # Configuration files
│
├── 📄 app.js                         # Express app setup
├── 📄 server.js                      # Server entry point
├── 📄 package.json                   # Dependencies
├── 📄 .env                           # Environment variables
└── 📄 README.md                      # This file
```

## 🚀 Installation & Setup

### **Prerequisites**
- Node.js 18+ installed
- MongoDB 6+ running
- Git for version control

### **Installation Steps**

1. **Clone Repository**
```bash
git clone <repository-url>
cd project-management
```

2. **Install Dependencies**
```bash
npm install
```

3. **Environment Configuration**
Create `.env` file in root directory:
```env
# Server Configuration
PORT=3000
NODE_ENV=development

# Database Configuration
MONGODB_URI=mongodb://localhost:27017/project_management
MONGODB_TEST_URI=mongodb://localhost:27017/project_management_test

# JWT Configuration
JWT_SECRET=your_super_secret_jwt_key_here
JWT_EXPIRES_IN=7d

# Email Configuration (Optional)
EMAIL_HOST=smtp.gmail.com
EMAIL_PORT=587
EMAIL_USER=your_email@gmail.com
EMAIL_PASS=your_app_password

# Security
BCRYPT_SALT_ROUNDS=12
```

4. **Start Development Server**
```bash
npm run dev
```

5. **Access Application**
- API: `http://localhost:3000/api/app`
- Health Check: `http://localhost:3000/api/app/health`

## 📋 Usage Examples

### **1. User Registration & Authentication**
```javascript
// Register new user
POST /api/app/auth/register
{
  "name": "John Doe",
  "email": "john@example.com",
  "password": "SecurePass123!"
}

// Login
POST /api/app/auth/login
{
  "email": "john@example.com",
  "password": "SecurePass123!"
}
```

### **2. Create Workspace**
```javascript
POST /api/app/workspaces
Authorization: Bearer <token>
{
  "name": "Tech Startup Inc",
  "description": "Our main development workspace",
  "settings": {
    "isPublic": false,
    "allowInvites": true
  }
}
```

### **3. Create Project**
```javascript
POST /api/app/projects
Authorization: Bearer <token>
{
  "workspaceId": "workspace_id_here",
  "name": "Mobile App Development",
  "description": "iOS and Android app development project",
  "priority": "high",
  "startDate": "2025-08-17",
  "endDate": "2025-12-31",
  "budget": {
    "allocated": 50000,
    "currency": "USD"
  }
}
```

### **4. Create Task**
```javascript
POST /api/app/tasks
Authorization: Bearer <token>
{
  "projectId": "project_id_here",
  "title": "Implement user authentication",
  "description": "Add JWT-based authentication system",
  "priority": "high",
  "type": "feature",
  "estimatedHours": 8,
  "dueDate": "2025-08-25T10:00:00Z",
  "tags": ["authentication", "security"]
}
```

## 🔜 Upcoming Features & Complete Roadmap

### **🎯 Current Implementation Status**
- ✅ **Module 1: Authentication** - JWT-based auth, user management, session handling
- ✅ **Module 2: Workspace Management** - Multi-tenant workspaces, member management
- ✅ **Module 3: Project Management** - Full CRUD, member assignment, budget tracking
- ✅ **Module 4: Task Management** - Advanced task system, time tracking, watchers

---

### **� Phase 2: Core Collaboration Features**

#### **📢 Module 5: Notifications System** 
**Status**: Next in Development
- **Real-time Notifications**: Socket.io integration for instant updates
- **Email Notifications**: Configurable email alerts for important events
- **In-app Notification Center**: Centralized notification management
- **Push Notifications**: Mobile app push notification support
- **Smart Notifications**: Digest emails, priority filtering, do-not-disturb modes
- **Notification Types**:
  - Task assignments, status changes, due date reminders
  - Project updates, new members, milestone achievements
  - Workspace invitations, role changes, announcements
  - System maintenance, security alerts, feature updates

#### **📧 Module 6: Email Notification & Communication System**
**Status**: High Priority
- **Email Template Engine**: Dynamic, customizable email templates
- **Multi-channel Email Delivery**: SMTP, SendGrid, AWS SES, Mailgun support
- **Email Automation**: Triggered emails based on system events
- **Email Preferences**: User-controlled notification settings
- **Email Analytics**: Delivery tracking, open rates, click-through rates
- **Features**:
  - **Welcome & Onboarding Emails**: User registration, workspace invitations
  - **Task & Project Notifications**: 
    - Task assignments and updates
    - Due date reminders (1 day, 1 hour before)
    - Project milestone notifications
    - Status change alerts
  - **Collaboration Emails**:
    - New comments and mentions
    - File sharing notifications
    - Team member additions
  - **Digest Emails**:
    - Daily/weekly activity summaries
    - Overdue tasks reports
    - Project progress updates
  - **Administrative Emails**:
    - Password reset and security alerts
    - Billing and subscription updates
    - System maintenance notifications
  - **Advanced Features**:
    - Email scheduling and queuing
    - Bulk email operations
    - Email bounce handling
    - Unsubscribe management
    - A/B testing for email templates
    - Multi-language email support
    - Rich HTML emails with embedded images
    - Calendar invite attachments (.ics files)
    - Email signature customization
    - Auto-reply detection and handling

#### **⏱️ Module 7: Advanced Time Tracking & Reporting**
**Status**: Planned
- **Detailed Time Entries**: Enhanced time logging with descriptions
- **Time Reports & Analytics**: Productivity metrics and insights
- **Billable Hours Tracking**: Client billing and invoice generation
- **Time Approval Workflows**: Manager approval for time entries
- **Time Tracking Integration**: Integration with existing task time logging
- **Features**:
  - Timer functionality with start/stop/pause
  - Time entry templates and categories
  - Automatic time tracking suggestions
  - Time-based project budgeting
  - Overtime and break tracking
  - Team productivity comparisons

#### **📁 Module 8: File Management & Document System**
**Status**: Planned
- **File Upload System**: Support for multiple file types and sizes
- **Document Versioning**: Track document changes and revisions
- **File Sharing & Permissions**: Granular access control for documents
- **Cloud Storage Integration**: AWS S3, Google Drive, Dropbox support
- **File Organization**: Folders, tags, and search functionality
- **Features**:
  - Drag-and-drop file uploads
  - Image and document previews
  - File compression and optimization
  - Bulk file operations
  - File activity history
  - Integration with tasks and projects

#### **💬 Module 9: Enhanced Comments & Activity System**
**Status**: Planned
- **Comment Model Implementation**: Full comment system for tasks/projects
- **Activity Feed**: Real-time activity streams for projects and workspaces
- **Mentions & Notifications**: @mention users in comments
- **Comment Threads**: Nested replies and discussions
- **Rich Text Comments**: Markdown support, file attachments
- **Features**:
  - Comment reactions and likes
  - Comment editing and deletion
  - Comment search and filtering
  - Automated activity logging
  - Comment templates
  - Integration with notifications system

---

### **🎯 Phase 3: Advanced Analytics & Intelligence**

#### **📊 Module 10: Dashboard & Advanced Analytics**
**Status**: Planned
- **Project Progress Dashboards**: Visual project status and metrics
- **Team Productivity Analytics**: Individual and team performance insights
- **Custom Reports**: Configurable reporting system
- **KPI Tracking**: Key performance indicators and goal tracking
- **Data Visualization**: Charts, graphs, and interactive displays
- **Features**:
  - Burndown and velocity charts
  - Resource utilization reports
  - Budget vs actual spending analysis
  - Timeline and milestone tracking
  - Custom dashboard widgets
  - Export capabilities (PDF, Excel, CSV)

#### **🤖 Module 11: AI & Automation**
**Status**: Future Development
- **Smart Task Assignment**: AI-powered task distribution
- **Predictive Analytics**: Project completion predictions
- **Automated Reporting**: Scheduled report generation
- **Risk Assessment**: Project risk identification and mitigation
- **Smart Suggestions**: AI-powered recommendations
- **Features**:
  - Natural language task creation
  - Intelligent due date suggestions
  - Automated status updates
  - Pattern recognition in project data
  - Workload balancing recommendations
  - Performance optimization insights

---

### **🔗 Phase 4: Integrations & Ecosystem**

#### **🔌 Module 12: Third-party Integrations**
**Status**: Planned
- **Version Control Integration**: GitHub, GitLab, Bitbucket
- **Communication Tools**: Slack, Microsoft Teams, Discord
- **Calendar Integration**: Google Calendar, Outlook, Apple Calendar
- **Development Tools**: Jira, Linear, Asana, Trello
- **Time Tracking Tools**: Toggl, Harvest, RescueTime
- **Features**:
  - Webhook management system
  - API key management
  - Custom integration builder
  - Data synchronization
  - Two-way integration support
  - Integration marketplace

#### **🔧 Module 13: API & Developer Tools**
**Status**: Planned
- **Public API**: RESTful API for third-party developers
- **API Documentation**: Interactive API documentation
- **SDK Development**: JavaScript, Python, PHP SDKs
- **Webhook System**: Event-driven webhook notifications
- **Developer Portal**: API key management and analytics
- **Features**:
  - GraphQL API support
  - API rate limiting and quotas
  - API versioning and deprecation
  - Developer sandbox environment
  - API usage analytics
  - Custom app marketplace

---

### **👥 Phase 5: Advanced User Experience**

#### **🎨 Module 14: UI/UX Enhancements**
**Status**: Future Development
- **Custom Themes**: Light/dark mode, custom color schemes
- **Responsive Design**: Mobile-first responsive interface
- **Accessibility**: WCAG 2.1 AA compliance
- **Internationalization**: Multi-language support
- **User Customization**: Personalized dashboards and layouts
- **Features**:
  - Drag-and-drop interface builders
  - Custom field types
  - Keyboard shortcuts
  - Offline mode support
  - Progressive Web App (PWA)
  - Voice commands and accessibility

#### **� Module 14: Mobile Applications**
**Status**: Future Development
- **Native iOS App**: Swift-based iOS application
- **Native Android App**: Kotlin-based Android application
- **Cross-platform Support**: React Native or Flutter option
- **Offline Functionality**: Sync when connectivity restored
- **Mobile-specific Features**: Push notifications, biometric auth
- **Features**:
  - Mobile-optimized task management
  - Photo capture and upload
  - GPS-based time tracking
  - Voice-to-text for quick task creation
  - Mobile-specific widgets
  - Apple Watch and Android Wear support

---

### **🔒 Phase 6: Enterprise & Security**

#### **🛡️ Module 16: Advanced Security & Compliance**
**Status**: Future Development
- **Single Sign-On (SSO)**: SAML, OAuth2, LDAP integration
- **Two-Factor Authentication**: SMS, authenticator app, hardware keys
- **Audit Logging**: Comprehensive activity and security logs
- **Data Encryption**: End-to-end encryption for sensitive data
- **Compliance**: GDPR, HIPAA, SOC 2 compliance features
- **Features**:
  - Role-based access control (RBAC)
  - IP allowlisting and geofencing
  - Session management and timeout
  - Data loss prevention (DLP)
  - Security scanning and monitoring
  - Backup and disaster recovery

#### **� Module 16: Enterprise Administration**
**Status**: Future Development
- **Advanced User Management**: Bulk user operations, directory sync
- **Organizational Hierarchy**: Department and team structures
- **License Management**: Seat management and billing integration
- **System Administration**: Health monitoring, performance tuning
- **Multi-tenancy**: Complete tenant isolation and customization
- **Features**:
  - Custom user roles and permissions
  - Automated user provisioning
  - Resource usage monitoring
  - Cost allocation and chargeback
  - Service level agreements (SLA)
  - Enterprise support integration

---

### **📈 Phase 7: Advanced Business Intelligence**

#### **📊 Module 18: Business Intelligence & Reporting**
**Status**: Future Development
- **Advanced Analytics Engine**: Complex data analysis and insights
- **Predictive Analytics**: Machine learning-powered predictions
- **Custom Report Builder**: Drag-and-drop report creation
- **Data Warehouse**: Centralized data storage and analysis
- **Real-time Dashboards**: Live updating business metrics
- **Features**:
  - SQL query interface for power users
  - Automated insight generation
  - Comparative analysis tools
  - Trend analysis and forecasting
  - Custom KPI definitions
  - Executive summary reports

#### **� Module 18: Workflow Automation**
**Status**: Future Development
- **Workflow Designer**: Visual workflow creation tool
- **Automated Actions**: Trigger-based automated responses
- **Business Process Management**: Complex workflow orchestration
- **Integration Workflows**: Multi-system process automation
- **Approval Workflows**: Multi-stage approval processes
- **Features**:
  - Conditional logic and branching
  - Scheduled workflow execution
  - Error handling and retry logic
  - Workflow templates and marketplace
  - Performance monitoring
  - Compliance workflow tracking

---

### **🌐 Phase 8: Platform & Ecosystem**

#### **🛠️ Module 20: Platform as a Service (PaaS)**
**Status**: Long-term Vision
- **Custom App Development**: Build custom applications on the platform
- **API Gateway**: Centralized API management and routing
- **Microservices Architecture**: Modular, scalable system design
- **Container Orchestration**: Docker and Kubernetes integration
- **Service Mesh**: Advanced service communication and monitoring

#### **🤝 Module 20: Marketplace & Community**
**Status**: Long-term Vision
- **App Marketplace**: Third-party application ecosystem
- **Template Library**: Community-contributed project templates
- **Integration Marketplace**: Pre-built integration components
- **Community Forum**: User community and knowledge sharing
- **Certification Program**: Developer and user certification

---

### **📋 Implementation Timeline**

```
Phase 2: Core Collaboration (Q1-Q2 2025)
├── ✅ Tasks Management (Completed)
├── 🔄 Notifications System (In Progress)
├── 📧 Email Notification System (Q1 2025)
├── ⏱️ Time Tracking (Q1 2025)
├── 📁 File Management (Q2 2025)
└── 💬 Enhanced Comments (Q2 2025)

Phase 3: Advanced Analytics (Q3-Q4 2025)
├── 📊 Dashboard & Analytics
└── 🤖 AI & Automation

Phase 4: Integrations (2026)
├── 🔌 Third-party Integrations
├── 🔧 API & Developer Tools
└── 🌐 Integration Marketplace

Phase 5: Mobile & UX (2026-2027)
├── 📱 Mobile Applications
├── 🎨 UI/UX Enhancements
└── 🌍 Internationalization

Phase 6: Enterprise (2027)
├── 🛡️ Advanced Security
├── 🏢 Enterprise Administration
└── 📈 Business Intelligence

Phase 7-8: Platform Evolution (2027-2028)
├── 🔄 Workflow Automation
├── 🛠️ Platform as a Service
└── 🤝 Marketplace & Community
```

### **🎯 Feature Priorities**

**High Priority (Next 6 months)**
1. 📢 Notifications System
2. 📧 Email Notification System
3. ⏱️ Time Tracking & Reporting
4. 📁 File Management
5. 💬 Comments System

**Medium Priority (6-12 months)**
1. 📊 Dashboard & Analytics
2. 🔌 Basic Integrations
3. 📱 Mobile App MVP
4. 🛡️ Enhanced Security

**Future Development (12+ months)**
1. 🤖 AI & Automation
2. 🏢 Enterprise Features
3. 🛠️ Platform Services
4. 🤝 Marketplace Ecosystem

## 🧪 Testing

```bash
# Run all tests
npm test

# Run tests with coverage
npm run test:coverage

# Run tests in watch mode
npm run test:watch
```

## 🚀 Deployment

### **Production Setup**
1. Set `NODE_ENV=production` in environment
2. Configure production MongoDB instance
3. Set secure JWT secrets
4. Enable HTTPS
5. Configure reverse proxy (Nginx)
6. Set up monitoring and logging

### **Docker Deployment**
```bash
# Build Docker image
docker build -t project-management .

# Run with Docker Compose
docker-compose up -d
```

## 📈 Performance

- **Database Indexing**: Optimized queries with proper indexes
- **Caching**: Redis integration ready for session and query caching
- **Pagination**: Built-in pagination for large datasets
- **Validation**: Input validation to prevent malformed requests
- **Error Handling**: Comprehensive error handling and logging

## 🔒 Security Features

- **JWT Authentication**: Secure token-based authentication
- **Password Hashing**: Bcrypt with salt for password security
- **Input Validation**: Comprehensive input validation and sanitization
- **CORS Protection**: Configurable CORS policies
- **Rate Limiting**: API rate limiting (ready for implementation)
- **SQL Injection Prevention**: NoSQL injection protection via Mongoose

## 🤝 Contributing

1. Fork the repository
2. Create feature branch (`git checkout -b feature/amazing-feature`)
3. Commit changes (`git commit -m 'Add amazing feature'`)
4. Push to branch (`git push origin feature/amazing-feature`)
5. Open Pull Request

## 📝 License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

## 📞 Support

For support and questions:
- 📧 Email: support@projectmanagement.com
- 📚 Documentation: [docs.projectmanagement.com](https://docs.projectmanagement.com)
- 🐛 Issues: [GitHub Issues](https://github.com/your-repo/issues)

---

**Built with ❤️ by the Development Team**

- Team member assignment to projects and tasks
- Real-time comments and discussions
- File sharing and document management
- In-app notifications and email alerts
- Activity feed and timeline
- @mentions and tagging

### ⏱️ Time & Progress Tracking
- Time logging for tasks and projects
- Progress tracking with percentage completion
- Deadline management and reminders
- Milestone creation and tracking
- Gantt chart visualization
- Time reports and analytics

### 📊 Dashboard & Reporting
- Personalized dashboard with task overview
- Project progress dashboard
- Team performance metrics
- Time tracking reports
- Export functionality (PDF, CSV)
- Advanced filtering and search

### 📅 Calendar & Scheduling
- Integrated calendar view
- Task deadline visualization
- Project timeline overview
- Meeting scheduling integration
- Milestone calendar

## System Architecture

### High-Level Architecture
```
┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐
│   Frontend      │    │   Backend       │    │   Database      │
│   (React/Vue)   │◄──►│   (Node.js +    │◄──►│   (MongoDB)     │
│                 │    │    Express)     │    │                 │
└─────────────────┘    └─────────────────┘    └─────────────────┘
         │                       │                       │
         │              ┌─────────────────┐              │
         │              │   Middleware    │              │
         │              │   - Auth        │              │
         │              │   - Validation  │              │
         │              │   - Logging     │              │
         │              └─────────────────┘              │
         │                                               │
    ┌─────────────────┐                        ┌─────────────────┐
    │   External      │                        │   File Storage  │
    │   Services      │                        │   (Local/Cloud) │
    │   - Email       │                        │                 │
    │   - Push Notif  │                        │                 │
    └─────────────────┘                        └─────────────────┘
```

### Database Architecture
```
MongoDB Database: project_management
├── Collections:
│   ├── users                    # User accounts (global)
│   ├── workspaces              # Workspace/Organization data
│   ├── workspace_members       # User-Workspace relationships
│   ├── projects                # Projects (workspace-scoped)
│   ├── tasks                   # Tasks (workspace-scoped)
│   ├── comments                # Task/Project comments
│   ├── time_entries            # Time tracking logs
│   └── notifications           # User notifications
│
├── Indexes:
│   ├── users: { email: 1 } (unique)
│   ├── workspace_members: { workspace: 1, user: 1 } (compound)
│   ├── projects: { workspace: 1, status: 1 }
│   ├── tasks: { workspace: 1, project: 1, assignee: 1 }
│   └── time_entries: { user: 1, date: 1 }
│
└── Relationships:
    ├── Workspace → WorkspaceMembers (1:Many)
    ├── User → WorkspaceMembers (1:Many) 
    ├── Workspace → Projects (1:Many)
    ├── Project → Tasks (1:Many)
    ├── User → Tasks (1:Many)
    └── Task → Comments (1:Many)
```

### Database Connection Flow
```
src/DB/db.connection.js
├── MongoDB Connection Setup
├── Mongoose Configuration  
├── Connection Pool Management
├── Error Handling & Retry Logic
└── Environment-based Configuration
    ├── Development: Local MongoDB
    ├── Testing: In-Memory MongoDB
    └── Production: MongoDB Atlas
```

### Backend Architecture
```
project-management/
├── src/
│   ├── config/              # Application configurations
│   ├── DB/                  # Database connection and configuration
│   ├── models/              # MongoDB/Mongoose models
│   ├── modules/             # Business logic modules (feature-based)
│   │   ├── auth/           # Authentication module
│   │   ├── workspaces/     # Workspace management
│   │   ├── projects/       # Project management
│   │   ├── tasks/          # Task management
│   │   ├── users/          # User management
│   │   └── dashboard/      # Dashboard logic
│   ├── routes/             # API route definitions
│   │   ├── app.js          # Mobile/App routes
│   │   └── web.js          # Web application routes
│   ├── services/           # External services and integrations
│   └── utils/              # Helper functions and utilities
├── bin/                    # Application entry point
├── public/                 # Static files
├── app.js                  # Express application setup
├── package.json            # Dependencies and scripts
└── .env                    # Environment variables
```

## Database Schema

### Workspaces Collection
```javascript
{
  _id: ObjectId,
  name: String,
  description: String,
  slug: String (unique),
  logo: String,
  owner: ObjectId (ref: User),
  settings: {
    timezone: String,
    workingDays: [String],
    workingHours: { start: String, end: String },
    currency: String,
    features: [String]
  },
  subscription: {
    plan: String (enum: ['free', 'pro', 'enterprise']),
    expiresAt: Date,
    isActive: Boolean
  },
  createdAt: Date,
  updatedAt: Date
}
```

### WorkspaceMembers Collection
```javascript
{
  _id: ObjectId,
  workspace: ObjectId (ref: Workspace),
  user: ObjectId (ref: User),
  role: String (enum: ['workspace_admin', 'project_manager', 'team_member']),
  permissions: [String],
  invitedBy: ObjectId (ref: User),
  invitedAt: Date,
  joinedAt: Date,
  status: String (enum: ['pending', 'active', 'inactive']),
  createdAt: Date,
  updatedAt: Date
}
```

### Users Collection
```javascript
{
  _id: ObjectId,
  name: String,
  email: String (unique),
  password: String (hashed),
  avatar: String,
  isActive: Boolean,
  lastLogin: Date,
  defaultWorkspace: ObjectId (ref: Workspace),
  createdAt: Date,
  updatedAt: Date
}
```

### Projects Collection
```javascript
{
  _id: ObjectId,
  workspace: ObjectId (ref: Workspace),
  name: String,
  description: String,
  status: String (enum: ['planning', 'active', 'on_hold', 'completed']),
  priority: String (enum: ['low', 'medium', 'high']),
  startDate: Date,
  endDate: Date,
  owner: ObjectId (ref: User),
  members: [ObjectId] (ref: User),
  tags: [String],
  progress: Number (0-100),
  budget: Number,
  createdAt: Date,
  updatedAt: Date
}
```

### Tasks Collection
```javascript
{
  _id: ObjectId,
  workspace: ObjectId (ref: Workspace),
  title: String,
  description: String,
  project: ObjectId (ref: Project),
  assignee: ObjectId (ref: User),
  reporter: ObjectId (ref: User),
  status: String (enum: ['todo', 'in_progress', 'review', 'done']),
  priority: String (enum: ['low', 'medium', 'high']),
  dueDate: Date,
  estimatedHours: Number,
  loggedHours: Number,
  tags: [String],
  dependencies: [ObjectId] (ref: Task),
  subtasks: [ObjectId] (ref: Task),
  attachments: [String],
  createdAt: Date,
  updatedAt: Date
}
```

### Comments Collection
```javascript
{
  _id: ObjectId,
  content: String,
  author: ObjectId (ref: User),
  task: ObjectId (ref: Task),
  project: ObjectId (ref: Project),
  mentions: [ObjectId] (ref: User),
  createdAt: Date,
  updatedAt: Date
}
```

### TimeEntries Collection
```javascript
{
  _id: ObjectId,
  user: ObjectId (ref: User),
  task: ObjectId (ref: Task),
  project: ObjectId (ref: Project),
  description: String,
  hours: Number,
  date: Date,
  createdAt: Date,
  updatedAt: Date
}
```

### Notifications Collection
```javascript
{
  _id: ObjectId,
  recipient: ObjectId (ref: User),
  sender: ObjectId (ref: User),
  type: String (enum: ['task_assigned', 'comment_added', 'deadline_reminder', 'mention']),
  message: String,
  isRead: Boolean,
  relatedTask: ObjectId (ref: Task),
  relatedProject: ObjectId (ref: Project),
  createdAt: Date
}
```

## API Endpoints

### Authentication Routes
```
POST   /api/auth/register      # Register new user
POST   /api/auth/login         # User login
POST   /api/auth/logout        # User logout
POST   /api/auth/refresh       # Refresh JWT token
POST   /api/auth/forgot        # Forgot password
POST   /api/auth/reset         # Reset password
```

### Workspace Routes
```
GET    /api/workspaces         # Get user's workspaces
POST   /api/workspaces         # Create new workspace
GET    /api/workspaces/:id     # Get workspace details
PUT    /api/workspaces/:id     # Update workspace
DELETE /api/workspaces/:id     # Delete workspace
POST   /api/workspaces/:id/invite    # Invite user to workspace
GET    /api/workspaces/:id/members   # Get workspace members
PUT    /api/workspaces/:id/members/:userId # Update member role
DELETE /api/workspaces/:id/members/:userId # Remove member
POST   /api/workspaces/:id/switch    # Switch to workspace
```

### User Routes
```
GET    /api/users              # Get users in current workspace
GET    /api/users/:id          # Get user by ID
PUT    /api/users/:id          # Update user profile
DELETE /api/users/:id          # Delete user
POST   /api/users/:id/avatar   # Upload avatar
```

### Project Routes (Workspace Scoped)
```
GET    /api/workspaces/:workspaceId/projects           # Get workspace projects
POST   /api/workspaces/:workspaceId/projects           # Create project
GET    /api/workspaces/:workspaceId/projects/:id       # Get project by ID
PUT    /api/workspaces/:workspaceId/projects/:id       # Update project
DELETE /api/workspaces/:workspaceId/projects/:id       # Delete project
POST   /api/workspaces/:workspaceId/projects/:id/members # Add member to project
DELETE /api/workspaces/:workspaceId/projects/:id/members/:userId # Remove member
```

### Task Routes (Workspace Scoped)
```
GET    /api/workspaces/:workspaceId/tasks              # Get workspace tasks
POST   /api/workspaces/:workspaceId/tasks              # Create task
GET    /api/workspaces/:workspaceId/tasks/:id          # Get task by ID
PUT    /api/workspaces/:workspaceId/tasks/:id          # Update task
DELETE /api/workspaces/:workspaceId/tasks/:id          # Delete task
POST   /api/workspaces/:workspaceId/tasks/:id/comments # Add comment
GET    /api/workspaces/:workspaceId/tasks/:id/comments # Get task comments
```

### Time Tracking Routes (Workspace Scoped)
```
GET    /api/workspaces/:workspaceId/time-entries       # Get time entries
POST   /api/workspaces/:workspaceId/time-entries       # Log time
PUT    /api/workspaces/:workspaceId/time-entries/:id   # Update time entry
DELETE /api/workspaces/:workspaceId/time-entries/:id   # Delete time entry
```

### Dashboard Routes (Workspace Scoped)
```
GET    /api/workspaces/:workspaceId/dashboard/overview # Get dashboard data
GET    /api/workspaces/:workspaceId/dashboard/tasks    # Get user tasks
GET    /api/workspaces/:workspaceId/dashboard/projects # Get user projects
GET    /api/workspaces/:workspaceId/reports/time       # Time tracking reports
GET    /api/workspaces/:workspaceId/reports/progress   # Progress reports
```

## Tech Stack

### Backend
- **Node.js** - Runtime environment
- **Express.js** - Web framework
- **MongoDB** - Database
- **Mongoose** - ODM for MongoDB
- **JWT** - Authentication
- **bcrypt** - Password hashing
- **multer** - File upload handling
- **cors** - Cross-origin resource sharing
- **helmet** - Security headers
- **express-validator** - Input validation

### Development Tools
- **nodemon** - Development server
- **dotenv** - Environment variables
- **eslint** - Code linting
- **prettier** - Code formatting
- **jest** - Testing framework
- **supertest** - API testing

### Optional Frontend
- **React.js** or **Vue.js** - Frontend framework
- **Axios** - HTTP client
- **Socket.io** - Real-time communication

## Project Structure

```
project-management/
├── src/
│   ├── config/
│   │   ├── app.config.js        # Application configuration
│   │   ├── jwt.config.js        # JWT configuration
│   │   └── upload.config.js     # File upload configuration
│   ├── DB/
│   │   ├── db.connection.js     # MongoDB connection
│   │   └── db.config.js         # Database configuration
│   ├── models/
│   │   ├── User.js              # User model
│   │   ├── Workspace.js         # Workspace model
│   │   ├── WorkspaceMember.js   # Workspace member model
│   │   ├── Project.js           # Project model
│   │   ├── Task.js              # Task model
│   │   ├── Comment.js           # Comment model
│   │   ├── TimeEntry.js         # Time tracking model
│   │   └── Notification.js      # Notification model
│   ├── modules/
│   │   ├── auth/
│   │   │   ├── auth.controller.js    # Authentication logic
│   │   │   ├── auth.service.js       # Auth business logic
│   │   │   └── auth.validator.js     # Auth input validation
│   │   ├── workspaces/
│   │   │   ├── workspace.controller.js
│   │   │   ├── workspace.service.js
│   │   │   └── workspace.validator.js
│   │   ├── projects/
│   │   │   ├── project.controller.js
│   │   │   ├── project.service.js
│   │   │   └── project.validator.js
│   │   ├── tasks/
│   │   │   ├── task.controller.js
│   │   │   ├── task.service.js
│   │   │   └── task.validator.js
│   │   ├── users/
│   │   │   ├── user.controller.js
│   │   │   ├── user.service.js
│   │   │   └── user.validator.js
│   │   └── dashboard/
│   │       ├── dashboard.controller.js
│   │       └── dashboard.service.js
│   ├── routes/
│   │   ├── app.js               # Mobile/App API routes
│   │   │   # /api/app/auth, /api/app/projects, etc.
│   │   └── web.js               # Web application routes  
│   │       # /api/web/dashboard, /api/web/reports, etc.
│   ├── services/
│   │   ├── emailService.js      # Email notifications
│   │   ├── notificationService.js # Push notifications
│   │   ├── fileService.js       # File upload/management
│   │   └── reportService.js     # Report generation
│   └── utils/
│       ├── helpers.js           # General helper functions
│       ├── constants.js         # Application constants
│       ├── validators.js        # Common validation rules
│       ├── middleware.js        # Custom middleware
│       └── responseHandler.js   # API response formatting
├── bin/
│   └── www                      # Application entry point
├── public/
│   ├── uploads/                 # File uploads directory
│   └── assets/                  # Static assets
├── tests/                       # Test files
├── docs/                        # Documentation
├── app.js                       # Express application setup
├── package.json                 # Dependencies and scripts
├── .env                         # Environment variables
├── .env.example                 # Environment template
├── .gitignore                   # Git ignore rules
└── README.md                    # Project documentation
```

## Installation

1. **Clone the repository**
   ```bash
   git clone <repository-url>
   cd project-management
   ```

2. **Install dependencies**
   ```bash
   npm install
   ```

3. **Set up environment variables**
   ```bash
   cp .env.example .env
   # Edit .env with your configuration
   ```

4. **Start MongoDB**
   ```bash
   # Make sure MongoDB is running on your system
   mongod
   ```

5. **Run the application**
   ```bash
   # Development mode
   npm run dev
   
   # Production mode
   npm start
   ```

## Environment Variables

```env
# Server Configuration
PORT=3000
NODE_ENV=development

# Database
MONGODB_URI=mongodb://localhost:27017/project_management

# JWT
JWT_SECRET=your-secret-key
JWT_EXPIRE=7d

# Email Configuration
EMAIL_HOST=smtp.gmail.com
EMAIL_PORT=587
EMAIL_USER=your-email@gmail.com
EMAIL_PASS=your-password

# File Upload
MAX_FILE_SIZE=10000000
FILE_UPLOAD_PATH=./uploads
```

## Usage

1. **Register a new account** or login with existing credentials
2. **Create a new project** and invite team members
3. **Add tasks** to your project and assign them to team members
4. **Track time** spent on tasks and monitor progress
5. **Use the dashboard** to get an overview of all projects and tasks
6. **Generate reports** to analyze team performance and project progress

## Development Phases

### Phase 1: Core Setup (Week 1)
- [ ] Project setup and configuration
- [ ] Database models and connections
- [ ] User authentication system
- [ ] Basic CRUD operations for users, projects, and tasks

### Phase 2: Advanced Features (Week 2)
- [ ] Time tracking functionality
- [ ] Comments and collaboration features
- [ ] Dashboard and reporting
- [ ] File upload and management
- [ ] Notifications system
- [ ] Frontend integration (if applicable)

### Phase 3: Testing & Documentation
- [ ] Unit and integration tests
- [ ] API documentation
- [ ] Deployment configuration
- [ ] Performance optimization

## Contributing

1. Fork the repository
2. Create a feature branch (`git checkout -b feature/amazing-feature`)
3. Commit your changes (`git commit -m 'Add some amazing feature'`)
4. Push to the branch (`git push origin feature/amazing-feature`)
5. Open a Pull Request

## License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

---

